<statements>  -> {NEWLINE} <statement> {NEWLINE+ <statement>} {NEWLINE}
<statement>   -> RETURN [<expr>]
				|CONTINUE
				| BREAK
				|<expr>

<expr>        ->  VAR == <expr> | <comp-expr> {(AND|OR) <comp-expr>}
<comp-expr>   -> NOT <comp-expr> | <arith-expr> {(EE|LT|GT|LTE|GTE) <arith-expr>}
<arith-expr>  -> <term> {(+|-) <term>}
<term>        -> <factor> {(*|/) <factor>}
<factor>      -> (+|-) <factor> | <power>
<power>	      -> <call> {^ factor}
<call>	      -> <atom> [LPAREN [<expr> {COMMA <expr>}] RPAREN]
<atom> 	      ->  INT|FLOAT|STRING|IDENTIFIER 
					|LPAREN <expr> RPAREN
					| <if/nif-expr>
					| <for-expr>
					| <while-expr>
					| <func-def>

<list-expr>  ->LSQUARE [<expr> {COMMA <expr>}] RSQUARE
<if/nif-expr>    -> IF <expr> THEN (<statement> [<if-expr-b>|<if-expr-c>]) 
				| (NEWLINE <statements> END | <if-expr-b> | <if-expr-c>)
<if-expr-b> -> ELIF <expr> THEN
              (<statement> [<if-expr-b> | <if-expr-c>])
                                | (NEWLINE <statements> END | <if-expr-b>|<if-expr-c>)
if-expr-c   -> ELSE <statement>
                                | (NEWLINE <statements> END)
<for-expr>   ->  FOR = <expr> TO <expr> [STEP <expr>] THEN <statement>
                                | (NEWLINE <statements> END)
<while-expr> -> WHILE <expr> THEN  <statement>
            | (NEWLINE <statements> END)
<func-def>   ->  FUN [IDENTIFIER]   
		LPAREN [IDENTIFIER {COMMA IDENTIFIER}] RPAREN	 
		ARROW <expr>
		| (NEWLINE <statements> END)